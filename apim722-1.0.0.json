{"info": {"termsOfService": "http://swagger.io/terms/", "contact": {"email": "apiteam@swagger.io"}, "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.", "license": {"url": "http://www.apache.org/licenses/LICENSE-2.0.html", "name": "Apache-2.0"}, "title": "apim722", "version": "1.0.0"}, "paths": {"/user/createWithArray": {"post": {"responses": {"default": {"description": "successful operation"}}, "parameters": [{"required": true, "in": "body", "description": "List of user object", "name": "body", "schema": {"items": {"$ref": "#/definitions/User"}, "type": "array"}}], "produces": ["application/xml", "application/json"], "operationId": "createUsersWithArrayInput", "tags": ["user"], "summary": "Creates list of users with given input array", "description": ""}}, "/store/order": {"post": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/Order"}}, "400": {"description": "Invalid Order"}}, "parameters": [{"required": true, "in": "body", "description": "order placed for purchasing the pet", "name": "body", "schema": {"$ref": "#/definitions/Order"}}], "produces": ["application/xml", "application/json"], "operationId": "placeOrder", "tags": ["store"], "summary": "Place an order for a pet", "description": ""}}, "/pet/{petId}": {"post": {"responses": {"405": {"description": "Invalid input"}}, "parameters": [{"in": "path", "description": "ID of pet that needs to be updated", "format": "int64", "required": true, "type": "integer", "name": "petId"}, {"required": false, "type": "string", "description": "Updated name of the pet", "in": "formData", "name": "name"}, {"required": false, "type": "string", "description": "Updated status of the pet", "in": "formData", "name": "status"}], "produces": ["application/xml", "application/json"], "tags": ["pet"], "summary": "Updates a pet in the store with form data", "security": [{"petstore_auth": ["write:pets", "read:pets"]}], "operationId": "updatePetWithForm", "consumes": ["application/x-www-form-urlencoded"], "description": ""}, "get": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/Pet"}}, "404": {"description": "Pet not found"}, "400": {"description": "Invalid ID supplied"}}, "parameters": [{"in": "path", "description": "ID of pet to return", "format": "int64", "required": true, "type": "integer", "name": "petId"}], "produces": ["application/xml", "application/json"], "tags": ["pet"], "summary": "Find pet by ID", "security": [{"api_key": []}], "operationId": "getPetById", "description": "Returns a single pet"}, "delete": {"responses": {"400": {"description": "Invalid pet value"}}, "parameters": [{"required": false, "type": "string", "name": "api_key", "in": "header"}, {"in": "path", "description": "Pet id to delete", "format": "int64", "required": true, "type": "integer", "name": "petId"}], "produces": ["application/xml", "application/json"], "tags": ["pet"], "summary": "Deletes a pet", "security": [{"petstore_auth": ["write:pets", "read:pets"]}], "operationId": "deletePet", "description": ""}}, "/pet": {"put": {"responses": {"405": {"description": "Validation exception"}, "404": {"description": "Pet not found"}, "400": {"description": "Invalid ID supplied"}}, "parameters": [{"required": true, "in": "body", "description": "Pet object that needs to be added to the store", "name": "body", "schema": {"$ref": "#/definitions/Pet"}}], "produces": ["application/xml", "application/json"], "tags": ["pet"], "summary": "Update an existing pet", "security": [{"petstore_auth": ["write:pets", "read:pets"]}], "operationId": "updatePet", "consumes": ["application/json", "application/xml"], "description": ""}, "post": {"responses": {"405": {"description": "Invalid input"}}, "parameters": [{"required": true, "in": "body", "description": "Pet object that needs to be added to the store", "name": "body", "schema": {"$ref": "#/definitions/Pet"}}], "produces": ["application/xml", "application/json"], "tags": ["pet"], "summary": "Add a new pet to the store", "security": [{"petstore_auth": ["write:pets", "read:pets"]}], "operationId": "addPet", "consumes": ["application/json", "application/xml"], "description": ""}}, "/store/inventory": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"additionalProperties": {"type": "integer", "format": "int32"}, "type": "object"}}}, "parameters": [], "produces": ["application/json"], "tags": ["store"], "summary": "Returns pet inventories by status", "security": [{"api_key": []}], "operationId": "getInventory", "description": "Returns a map of status codes to quantities"}}, "/user/{username}": {"put": {"responses": {"404": {"description": "User not found"}, "400": {"description": "Invalid user supplied"}}, "parameters": [{"required": true, "type": "string", "description": "name that need to be deleted", "in": "path", "name": "username"}, {"required": true, "in": "body", "description": "Updated user object", "name": "body", "schema": {"$ref": "#/definitions/User"}}], "produces": ["application/xml", "application/json"], "operationId": "updateUser", "tags": ["user"], "summary": "Updated user", "description": "This can only be done by the logged in user."}, "get": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/User"}}, "404": {"description": "User not found"}, "400": {"description": "Invalid username supplied"}}, "parameters": [{"required": true, "type": "string", "description": "The name that needs to be fetched. Use user1 for testing.", "in": "path", "name": "username"}], "produces": ["application/xml", "application/json"], "operationId": "getUserByName", "tags": ["user"], "summary": "Get user by user name", "description": ""}, "delete": {"responses": {"404": {"description": "User not found"}, "400": {"description": "Invalid username supplied"}}, "parameters": [{"required": true, "type": "string", "description": "The name that needs to be deleted", "in": "path", "name": "username"}], "produces": ["application/xml", "application/json"], "operationId": "deleteUser", "tags": ["user"], "summary": "Delete user", "description": "This can only be done by the logged in user."}}, "/user/login": {"get": {"responses": {"200": {"headers": {"X-Rate-Limit": {"type": "integer", "description": "calls per hour allowed by the user", "format": "int32"}, "X-Expires-After": {"type": "string", "description": "date in UTC when toekn expires", "format": "date-time"}}, "description": "successful operation", "schema": {"type": "string"}}, "400": {"description": "Invalid username/password supplied"}}, "parameters": [{"required": true, "type": "string", "description": "The user name for login", "in": "query", "name": "username"}, {"required": true, "type": "string", "description": "The password for login in clear text", "in": "query", "name": "password"}], "produces": ["application/xml", "application/json"], "operationId": "loginUser", "tags": ["user"], "summary": "Logs user into the system", "description": ""}}, "/store/order/{orderId}": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/Order"}}, "404": {"description": "Order not found"}, "400": {"description": "Invalid ID supplied"}}, "parameters": [{"description": "ID of pet that needs to be fetched", "format": "int64", "required": true, "maximum": 5, "minimum": 1, "in": "path", "type": "integer", "name": "orderId"}], "produces": ["application/xml", "application/json"], "operationId": "getOrderById", "tags": ["store"], "summary": "Find purchase order by ID", "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions"}, "delete": {"responses": {"404": {"description": "Order not found"}, "400": {"description": "Invalid ID supplied"}}, "parameters": [{"required": true, "type": "string", "description": "ID of the order that needs to be deleted", "in": "path", "name": "orderId"}], "produces": ["application/xml", "application/json"], "operationId": "deleteOrder", "tags": ["store"], "summary": "Delete purchase order by ID", "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors"}}, "/pet/findByStatus": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/Pet"}, "type": "array"}}, "400": {"description": "Invalid status value"}}, "parameters": [{"description": "Status values that need to be considered for filter", "name": "status", "in": "query", "items": {"default": "available", "enum": ["available", "pending", "sold"], "type": "string"}, "required": true, "type": "array", "collectionFormat": "csv"}], "produces": ["application/xml", "application/json"], "tags": ["pet"], "summary": "Finds Pets by status", "security": [{"petstore_auth": ["write:pets", "read:pets"]}], "operationId": "findPetsByStatus", "description": "Multiple status values can be provided with comma separated strings"}}, "/user/logout": {"get": {"responses": {"default": {"description": "successful operation"}}, "parameters": [], "produces": ["application/xml", "application/json"], "operationId": "logoutUser", "tags": ["user"], "summary": "Logs out current logged in user session", "description": ""}}, "/user/createWithList": {"post": {"responses": {"default": {"description": "successful operation"}}, "parameters": [{"required": true, "in": "body", "description": "List of user object", "name": "body", "schema": {"items": {"$ref": "#/definitions/User"}, "type": "array"}}], "produces": ["application/xml", "application/json"], "operationId": "createUsersWithListInput", "tags": ["user"], "summary": "Creates list of users with given input array", "description": ""}}, "/user": {"post": {"responses": {"default": {"description": "successful operation"}}, "parameters": [{"required": true, "in": "body", "description": "Created user object", "name": "body", "schema": {"$ref": "#/definitions/User"}}], "produces": ["application/xml", "application/json"], "operationId": "createUser", "tags": ["user"], "summary": "Create user", "description": "This can only be done by the logged in user."}}, "/pet/{petId}/uploadImage": {"post": {"responses": {"200": {"description": "successful operation", "schema": {"$ref": "#/definitions/ApiResponse"}}}, "parameters": [{"in": "path", "description": "ID of pet to update", "format": "int64", "required": true, "type": "integer", "name": "petId"}, {"required": false, "type": "string", "description": "Additional data to pass to server", "in": "formData", "name": "additionalMetadata"}, {"required": false, "type": "file", "description": "file to upload", "in": "formData", "name": "file"}], "produces": ["application/json"], "tags": ["pet"], "summary": "uploads an image", "security": [{"petstore_auth": ["write:pets", "read:pets"]}], "operationId": "uploadFile", "consumes": ["multipart/form-data"], "description": ""}}, "/pet/findByTags": {"get": {"responses": {"200": {"description": "successful operation", "schema": {"items": {"$ref": "#/definitions/Pet"}, "type": "array"}}, "400": {"description": "Invalid tag value"}}, "parameters": [{"description": "Tags to filter by", "name": "tags", "in": "query", "items": {"type": "string"}, "required": true, "type": "array", "collectionFormat": "csv"}], "produces": ["application/xml", "application/json"], "deprecated": true, "tags": ["pet"], "summary": "Finds Pets by tags", "security": [{"petstore_auth": ["write:pets", "read:pets"]}], "operationId": "findPetsByTags", "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."}}}, "schemes": ["http"], "tags": [{"externalDocs": {"url": "http://swagger.io", "description": "Find out more"}, "name": "pet", "description": "Everything about your Pets"}, {"name": "store", "description": "Access to Petstore orders"}, {"externalDocs": {"url": "http://swagger.io", "description": "Find out more about our store"}, "name": "user", "description": "Operations about user"}], "basePath": "/api/1/rest/feed/Automation/apim/apim722/1.0.0", "securityDefinitions": {"api_key": {"type": "apiKey", "name": "api_key", "in": "header"}, "petstore_auth": {"type": "oauth2", "flow": "implicit", "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog", "scopes": {"write:pets": "modify pets in your account", "read:pets": "read your pets"}}}, "host": "ip-172-27-176-253.us-west-2.compute.internal:8081", "definitions": {"Category": {"xml": {"name": "Category"}, "title": "Pet category", "type": "object", "properties": {"id": {"type": "integer", "format": "int64"}, "name": {"type": "string"}}, "description": "A category for a pet"}, "Pet": {"xml": {"name": "Pet"}, "description": "A pet for sale in the pet store", "title": "a Pet", "required": ["name", "photoUrls"], "type": "object", "properties": {"category": {"$ref": "#/definitions/Category"}, "status": {"enum": ["available", "pending", "sold"], "type": "string", "description": "pet status in the store"}, "name": {"type": "string", "example": "doggie"}, "tags": {"xml": {"wrapped": true, "name": "tag"}, "items": {"$ref": "#/definitions/Tag"}, "type": "array"}, "photoUrls": {"xml": {"wrapped": true, "name": "photoUrl"}, "items": {"type": "string"}, "type": "array"}, "id": {"type": "integer", "format": "int64"}}}, "ApiResponse": {"title": "An uploaded response", "type": "object", "properties": {"message": {"type": "string"}, "code": {"type": "integer", "format": "int32"}, "type": {"type": "string"}}, "description": "Describes the result of uploading an image resource"}, "Currency": {"pattern": "^[A-Z]{3,3}$", "type": "string", "description": "some description\n"}, "Amount": {"required": ["value", "currency"], "type": "object", "description": "some description\n", "properties": {"currency": {"$ref": "#/definitions/Currency"}, "value": {"format": "double", "minimum": 0.01, "type": "number", "description": "some description\n", "maximum": 1000000000000000}}}, "Tag": {"xml": {"name": "Tag"}, "title": "Pet Tag", "type": "object", "properties": {"id": {"type": "integer", "format": "int64"}, "name": {"type": "string"}}, "description": "A tag for a pet"}, "User": {"xml": {"name": "User"}, "title": "a User", "type": "object", "properties": {"username": {"type": "string"}, "firstName": {"type": "string"}, "lastName": {"type": "string"}, "userStatus": {"type": "integer", "description": "User Status", "format": "int32"}, "id": {"type": "integer", "format": "int64"}, "phone": {"type": "string"}, "password": {"type": "string"}, "email": {"type": "string"}}, "description": "A User who is purchasing from the pet store"}, "Order": {"xml": {"name": "Order"}, "title": "Pet Order", "type": "object", "properties": {"status": {"enum": ["placed", "approved", "delivered"], "type": "string", "description": "Order Status"}, "shipDate": {"type": "string", "format": "date-time"}, "complete": {"default": false, "type": "boolean"}, "petId": {"type": "integer", "format": "int64"}, "id": {"type": "integer", "format": "int64"}, "quantity": {"type": "integer", "format": "int32"}}, "description": "An order for a pets from the pet store"}}, "swagger": "2.0", "externalDocs": {"url": "http://swagger.io", "description": "Find out more about Swagger"}}